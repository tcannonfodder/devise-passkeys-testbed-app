<h2>Edit <%= resource_name.to_s.humanize %></h2>

<%= form_with(
      model: resource,
      as: resource_name,
      url: registration_path(resource_name),
      method: :put,
      data: {
        "reauthentication_challenge_url": new_user_reauthentication_challenge_url,
        "reauthentication_token_url": user_reauthentication_url,
        "reauthentication_token_field_name": "#{resource_name}[reauthentication_token]"
      }
) do |f| %>
  <%= render "devise/shared/error_messages", resource: resource %>
  <em>This form requires users to verify their identity by re-authenticating with a passkey</em>
  <fieldset>
    <table>
      <tr>
        <th><%= f.label :email %></th>
        <td><%= f.email_field :email, autofocus: true, autocomplete: "email", required: true %></td>
      </tr>
    </table>
  </fieldset>

  <%= f.hidden_field :reauthentication_token%>

  <% if devise_mapping.confirmable? && resource.pending_reconfirmation? %>
    <div>Currently waiting confirmation for: <%= resource.unconfirmed_email %></div>
  <% end %>

  <section>
    <button type="submit"><%= image_tag("passkey-black.svg", width: "25", height: "25") %> Verify & Update</button>
  </section>
<% end %>

<h3>Cancel my account</h3>

<%= form_with(
  model: resource,
  as: resource_name,
  url: registration_path(resource_name),
  method: :delete,
  data: {
    confirm: "Are you sure?",
    "reauthentication_challenge_url": new_user_reauthentication_challenge_url,
    "reauthentication_token_url": user_reauthentication_url,
    "reauthentication_token_field_name": "#{resource_name}[reauthentication_token]"
  }
) do |f| %>
  <%= f.hidden_field :reauthentication_token%>
  <button type="submit"><%= image_tag("passkey-black.svg", width: "25", height: "25") %> Verify & Cancel my account</button>
<% end %>

<%= link_to "Back", :back %>

<script type="module">
  import {getReauthenticationToken} from 'passkey_reauthentication_handler'

  let submitFormEvent = async function(event){
    event.preventDefault()
    event.stopImmediatePropagation()
    let form = event.currentTarget
    await getReauthenticationToken(form)
    form.submit()
  }

  document.querySelectorAll('form').forEach(form => { form.addEventListener('submit', submitFormEvent)})
</script>